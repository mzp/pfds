# ocamlfind
USE_OCAMLFIND = true

OCAMLPACKS[] =
	oUnit
	extlib


if $(not $(OCAMLFIND_EXISTS))
   eprintln('This project requires ocamlfind, but is was not found.')
   eprintln('You need to install ocamlfind and run "omake --configure".')
   exit 1

# behavior as traditional cpp
CPPFLAGS=-traditional-cpp

OCAML_WARN_FLAGS=-w A -warn-error A
OCAMLFLAGS=$`(OCAML_WARN_FLAGS)

.PHONY: all install config clean package
# ------------------------------
# util function
# ------------------------------
Shell. +=
    ocaml-clean(argv) =
      rm -f *.cm[aiox] *.o *.omc *.opt *.run *~ $(argv) *.cmxa *.a *.spot *.spit *.annot *-runner

public.AddDepend(target,files) =
    section
	.SCANNER: $(target) :
		echo "$(target) : $(files)"

# ------------------------------
# camlp4 rules
# ------------------------------
public.UseCamlp4(files) =
	protected.CAMLP4CMO = $(addprefix $(ROOT)/camlp4/,$(addsuffix .cmo,$(files)))
	OCAMLPPFLAGS+=-pp 'camlp4o $(CAMLP4CMO)'
	OCAMLDEPFLAGS+=-pp 'camlp4o $(CAMLP4CMO)'
	export

	.SCANNER: scan-ocaml-%.ml: %.ml $(CAMLP4CMO)

# ------------------------------
# package
# ------------------------------
public.MyOCamlPackage(name, files) =
   # XXX: JYH: these variables should be marked private in 0.9.9
   protected.OFILES   = $(addsuffix $(EXT_OBJ), $(files))
   protected.CMOFILES = $(addsuffix .cmo, $(files))
   protected.CMXFILES = $(addsuffix .cmx, $(files))

   protected.OBJ       = $(file $(name)$(EXT_OBJ))
   protected.CMO       = $(file $(name).cmo)
   protected.CMX       = $(file $(name).cmx)
   protected.CMI       = $(file $(name).cmi)
   protected.MLI       = $(file $(name).mli)

   protected.BYTE_TARGETS   = $(CMO)
   protected.NATIVE_TARGETS = $(CMX) $(OBJ)

   protected.TARGETS = $(CMI)
   if $(NATIVE_ENABLED)
       TARGETS += $(NATIVE_TARGETS)
       export

   if $(BYTE_ENABLED)
       TARGETS += $(BYTE_TARGETS)
       export

   #
   # Link commands
   #
   protected.BYTE_DEPS = $(CMOFILES)
   if $(and $(not $(NATIVE_ENABLED)), $(target-exists $(MLI)))
      BYTE_DEPS += $(CMI)
      export
   else
      BYTE_TARGETS += $(CMI)
      export

   protected.NATIVE_DEPS = $(CMXFILES) $(OFILES)
   if $(target-exists $(MLI))
      NATIVE_DEPS += $(CMI)
      export
   else
      NATIVE_TARGETS += $(CMI)
      export

   if $(target-exists $(MLI))
      $(CMI): $(MLI) :scanner: scan-ocaml-$(name).mli
           $(OCamlC) -c $<
   elseif $(NATIVE_ENABLED)
      $(NATIVE_TARGETS) $(CMI): $(NATIVE_DEPS)
           $(OCAMLFIND) $(OCAMLOPTLINK) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
               $(OCAMLOPTFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMX) $(OCamlLinkSort $(CMXFILES))
   else
      $(BYTE_TARGETS) $(CMI): $(BYTE_DEPS)
           $(OCAMLFIND) $(OCAMLC) $(LAZY_OCAMLFINDFLAGS) $(PREFIXED_OCAMLPACKS) $(OCAMLFLAGS) \
               $(OCAMLCFLAGS) $(OCAML_LIB_FLAGS) -pack -o $(CMO) $(OCamlLinkSort $(CMOFILES))

   return $(TARGETS)

# ------------------------------
# ounit
# ------------------------------
OUNIT_SRC_DIR=./
OUNIT_LIBS[]=

public.OUnitTest(name,files) =
	protected.test_file = $(addsuffix Test,$(name))
	protected.target    = $(addsuffix -runner,$(test_file))
	protected.src_files = $(addprefix $(OUNIT_SRC_DIR),$(files))

	.PHONY: check check-$(name) clean check-detail-$(name) check-detail
	OCamlProgram($(target), $(test_file) $(src_files) $(OUNIT_LIBS))

	check-$(name): $(target)
		$(addprefix ./,$(target))

	check-detail-$(name): $(target)
		($(addprefix ./,$(target)) -verbose ; true) | tee -a $(ROOT)/unittest.log

	check: check-$(name)
	check-detail: check-detail-$(name)

	export

# ------------------------------
# other rules
# ------------------------------
%.mli : %.mlip
    @rm -f $@
    @echo "(* CAUTION: this is a generated file.  If you edit it, all changes will be lost! *)" > $@
    $(CPP) $(CPPFLAGS) $*.mlip >> $@
    @chmod 444 $@

.SCANNER: %.mli : %.mlip
    $(CPP) $(CPPFLAGS) -M $< ;  true

%.ml: %.mlp
    @rm -f $@
    @echo "(* CAUTION: this is a generated file.  If you edit it, all changes will be lost! *)" > $@
    $(CPP) $(CPPFLAGS) $*.mlp >> $@
    @chmod 444 $@

.SCANNER: %.ml : %.mlp
    $(CPP) $(CPPFLAGS) -M $< /dev/null ; true

# ------------------------------
# other
# ------------------------------


FILES[] =
	lList

PROGRAM=../pfds

OUnitTest(lList, base lList)

# phony
.PHONY: clean
clean:
	ocaml-clean *.abc $(PROGRAM)